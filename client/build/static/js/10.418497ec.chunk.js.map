{"version":3,"sources":["Redux/Shop/ShopSelectors.js","Pages/Shop/Shop.jsx"],"names":["SelectShop","state","Shop","SelectCollections","createSelector","Collections","SelectLoading","Loading","SelectAllCollections","Object","keys","map","key","SelectCurrentCollection","collectionRouteName","SelectCurrentItem","ItemName","items","find","item","name","lazy","CurrentCollection","ItemDetails","match","fetchCollectionsStart","isLoading","useEffect","exact","path","component","prototype","PropTypes","object","isRequired","func","bool","mapStateToProps","createStructuredSelector","connect"],"mappings":"iHAAA,oJAEMA,EAAa,SAAAC,GAAK,OAAIA,EAAMC,MAErBC,EAAoBC,YAAe,CAACJ,IAAa,SAAAE,GAAI,OAAIA,EAAKG,eAE9DC,EAAgBF,YAAe,CAACJ,IAAa,SAAAE,GAAI,OAAIA,EAAKK,WAE1DC,EAAuBJ,YAAe,CAACD,IAAoB,SAAAE,GAAW,OACjFI,OAAOC,KAAKL,GAAaM,KAAI,SAAAC,GAAG,OAAIP,EAAYO,SAGrCC,EAA0B,SAAAC,GAAmB,OACxDV,YAAe,CAACD,IAAoB,SAAAE,GAAW,OAAIA,EAAYS,OAEpDC,EAAoB,SAACC,EAAUF,GAAX,OAC/BV,YAAe,CAACD,IAAoB,SAAAE,GAAW,OAC7CA,EAAYS,GAAqBG,MAAMC,MAAK,SAAAC,GAAI,OAAIH,IAAaG,EAAKC,a,iCCjB1E,6FASMf,EAAcgB,gBAAK,kBACvB,iCAEIC,EAAoBD,gBAAK,kBAC7B,uDAEIE,EAAcF,gBAAK,kBACvB,kCAGInB,EAAO,SAAC,GAAiD,IAA/CsB,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,sBAAuBC,EAAgB,EAAhBA,UAI5C,OAHAC,qBAAU,WACRF,MACC,CAACA,IAEF,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAI,UAAKL,EAAMK,MAAQC,UAAWJ,EAAYnB,IAAUF,IACrE,kBAAC,IAAD,CACEuB,OAAK,EACLC,KAAI,UAAKL,EAAMK,KAAX,yBACJC,UAAWJ,EAAYnB,IAAUe,IAEnC,kBAAC,IAAD,CACEO,KAAI,UAAKL,EAAMK,KAAX,mCACJC,UAAWJ,EAAYnB,IAAUgB,MAMzCrB,EAAK6B,UAAY,CACfP,MAAOQ,IAAUC,OAAOC,WACxBT,sBAAuBO,IAAUG,KAAKD,WACtCR,UAAWM,IAAUI,KAAKF,YAG5B,IAAMG,EAAkBC,YAAyB,CAC/CZ,UAAWpB,MAGEiC,sBAAQF,EAAiB,CAAEZ,2BAA3Bc,CAAoDrC","file":"static/js/10.418497ec.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\nconst SelectShop = state => state.Shop;\r\n\r\nexport const SelectCollections = createSelector([SelectShop], Shop => Shop.Collections);\r\n\r\nexport const SelectLoading = createSelector([SelectShop], Shop => Shop.Loading);\r\n\r\nexport const SelectAllCollections = createSelector([SelectCollections], Collections =>\r\n  Object.keys(Collections).map(key => Collections[key])\r\n);\r\n\r\nexport const SelectCurrentCollection = collectionRouteName =>\r\n  createSelector([SelectCollections], Collections => Collections[collectionRouteName]);\r\n\r\nexport const SelectCurrentItem = (ItemName, collectionRouteName) =>\r\n  createSelector([SelectCollections], Collections =>\r\n    Collections[collectionRouteName].items.find(item => ItemName === item.name)\r\n  );\r\n","import React, { Fragment, useEffect, lazy } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { SelectLoading } from '../../Redux/Shop/ShopSelectors';\r\nimport { fetchCollectionsStart } from '../../Redux/Shop/ShopActions';\r\nimport Loading from '../../Components/ShopPageComponents/Loading/Loading';\r\nimport PropTypes from 'prop-types';\r\n// Code Splitting\r\nconst Collections = lazy(() =>\r\n  import('../../Components/ShopPageComponents/Collections/Collections')\r\n);\r\nconst CurrentCollection = lazy(() =>\r\n  import('../../Components/ShopPageComponents/CurrentCollection/CurrentCollection')\r\n);\r\nconst ItemDetails = lazy(() =>\r\n  import('../../Components/ShopPageComponents/ItemDetails/ItemDetails')\r\n);\r\n\r\nconst Shop = ({ match, fetchCollectionsStart, isLoading }) => {\r\n  useEffect(() => {\r\n    fetchCollectionsStart();\r\n  }, [fetchCollectionsStart]);\r\n  return (\r\n    <Fragment>\r\n      <Route exact path={`${match.path}`} component={isLoading ? Loading : Collections} />\r\n      <Route\r\n        exact\r\n        path={`${match.path}/:collectionRouteName`}\r\n        component={isLoading ? Loading : CurrentCollection}\r\n      />\r\n      <Route\r\n        path={`${match.path}/:collectionRouteName/:itemName`}\r\n        component={isLoading ? Loading : ItemDetails}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nShop.prototype = {\r\n  match: PropTypes.object.isRequired,\r\n  fetchCollectionsStart: PropTypes.func.isRequired,\r\n  isLoading: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isLoading: SelectLoading\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchCollectionsStart })(Shop);\r\n"],"sourceRoot":""}